#!/bin/bash
set -e

# Phase C-2: Comprehensive Deployment Verification & Reporting
# Purpose: Complete post-deployment analysis, verification, and detailed reporting
# Run after Phase C - provides comprehensive deployment health check and documentation
# Version 2.1 - PRODUCTION READY with Directory Validation
# Working Directory: Expected to run from deploy/ directory (e.g., domains/xxx/deploy)

echo "=== Phase C-2: Comprehensive Deployment Verification & Reporting ==="

# C2-00: Initialize DeployHQ Path Variables (Same as Phases A, B, C)
# These variables match DeployHQ's standard path structure
# When running in DeployHQ, these will be replaced with actual paths
# When testing manually, we detect the current directory structure

if [[ "%path%" == *"%"* ]]; then
    # We're running manually for testing - detect paths from current directory
    CURRENT_DIR="$(pwd)"
    if [[ "$CURRENT_DIR" =~ .*/domains/[^/]+/deploy$ ]] && [[ -d "releases" ]] && [[ -d "shared" ]]; then
        export DEPLOY_PATH="$(pwd)"
        export SHARED_PATH="$(pwd)/shared"
        # Find current release
        if [ -L "current" ]; then
            CURRENT_RELEASE=$(readlink current | sed 's|^./releases/||')
            export CURRENT_PATH="$(pwd)/current"
            export RELEASE_PATH="$(pwd)/releases/$CURRENT_RELEASE"
        else
            export CURRENT_PATH=""
            export RELEASE_PATH=""
        fi
        echo "? TESTING MODE: Detected paths from current directory"
    else
        echo "❌ ERROR: Not in a valid deployment directory for testing"
        echo "   Expected: domains/xxx/deploy (containing 'releases' and 'shared' directories)"
        echo "   Current:  $CURRENT_DIR"
        exit 1
    fi
else
    # We're running in DeployHQ - use the provided variables
    export DEPLOY_PATH="%path%"
    export RELEASE_PATH="%release_path%"
    export SHARED_PATH="%shared_path%"
    export CURRENT_PATH="%current_path%"
    echo "? DEPLOYHQ MODE: Using DeployHQ path variables"
fi

echo "? Path Variables:"
echo "   Deploy Path: $DEPLOY_PATH"
echo "   Release Path: $RELEASE_PATH"
echo "   Shared Path: $SHARED_PATH"
echo "   Current Path: $CURRENT_PATH"

# C2-01: Initialize Report Structure
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
DOMAIN_ROOT=$(dirname "$DEPLOY_PATH")
DOMAIN_NAME=$(basename "$DOMAIN_ROOT")
REPORT_DIR="$DOMAIN_ROOT/deployment-reports"
REPORT_FILE="$REPORT_DIR/deployment-report-$TIMESTAMP.md"

echo "? Starting comprehensive deployment verification..."
echo "   Domain: $DOMAIN_NAME"
echo "   Deploy Path: $DEPLOY_PATH"
echo "   Report: $REPORT_FILE"

# Create report directory
mkdir -p "$REPORT_DIR"

# Start report file
cat > "$REPORT_FILE" << EOF
# ? Deployment Verification Report

**Domain:** $DOMAIN_NAME  
**Timestamp:** $(date '+%Y-%m-%d %H:%M:%S')  
**Deploy Path:** \`$DEPLOY_PATH\`  
**Generated By:** Phase C-2 Verification Script  

---

## ? TL;DR - QUICK SUMMARY

EOF

# C2-02: Environment Detection and Basic Info
echo "=== Environment Detection ==="

cd "$DEPLOY_PATH"

# Detect current release
if [ -L "current" ]; then
    CURRENT_RELEASE=$(readlink current | sed 's|^./releases/||')
    echo "✅ Current release detected: $CURRENT_RELEASE"
else
    echo "❌ No current symlink found"
    CURRENT_RELEASE="NONE"
fi

# Count releases
RELEASE_COUNT=$(ls -1 releases/ 2>/dev/null | wc -l)
echo "? Total releases: $RELEASE_COUNT"

# Check shared directory
SHARED_SIZE=$(du -sh "$SHARED_PATH" 2>/dev/null | cut -f1 || echo "0")
echo "? Shared directory size: $SHARED_SIZE"

# Add initial report structure (TLDR will be updated later)
cat >> "$REPORT_FILE" << EOF
<!-- TLDR_PLACEHOLDER -->

---

## ? DETAILED ANALYSIS

### ?️ Infrastructure Status

### Directory Structure
\`\`\`
$DOMAIN_NAME/
├── deploy/
│   ├── current -> releases/$CURRENT_RELEASE
│   ├── releases/ ($RELEASE_COUNT releases)
│   └── shared/ ($SHARED_SIZE)
├── public_html -> $([ -L "$DOMAIN_ROOT/public_html" ] && readlink "$DOMAIN_ROOT/public_html" || echo "NOT FOUND")
└── deployment-reports/ ($(ls -1 "$REPORT_DIR" 2>/dev/null | wc -l) reports)
\`\`\`

EOF

# C2-03: Critical Symlink Verification
echo "=== Critical Symlink Verification ==="

SYMLINK_STATUS="HEALTHY"

# Function to check symlink
check_symlink() {
    local LINK_PATH="$1"
    local DESCRIPTION="$2"
    local EXPECTED_TARGET="$3"
    
    if [ -L "$LINK_PATH" ]; then
        local TARGET=$(readlink "$LINK_PATH")
        local RESOLVED=$(readlink -f "$LINK_PATH" 2>/dev/null || echo "BROKEN")
        
        if [ -e "$LINK_PATH" ]; then
            echo "✅ $DESCRIPTION: $TARGET"
            echo "   → $DESCRIPTION | ✅ VALID | $TARGET | $RESOLVED" >> /tmp/symlink_report
        else
            echo "❌ $DESCRIPTION: BROKEN ($TARGET)"
            echo "   → $DESCRIPTION | ❌ BROKEN | $TARGET | BROKEN" >> /tmp/symlink_report
            SYMLINK_STATUS="ISSUES_FOUND"
        fi
    else
        echo "❌ $DESCRIPTION: NOT A SYMLINK"
        echo "   → $DESCRIPTION | ❌ NOT_SYMLINK | N/A | N/A" >> /tmp/symlink_report
        SYMLINK_STATUS="ISSUES_FOUND"
    fi
}

# Initialize symlink report
echo "" > /tmp/symlink_report

# Check public_html (web root)
cd "$DOMAIN_ROOT"
check_symlink "public_html" "Web Root (public_html)" "deploy/current/public"

# Check current release symlink
cd "$DEPLOY_PATH"
check_symlink "current" "Current Release" "releases/$CURRENT_RELEASE"

# Check Laravel symlinks (if current exists)
if [ -n "$CURRENT_RELEASE" ] && [ "$CURRENT_RELEASE" != "NONE" ] && [ -d "$CURRENT_PATH" ]; then
    cd "$CURRENT_PATH"
    check_symlink ".env" "Environment File" "$SHARED_PATH/.env"
    check_symlink "storage" "Storage Directory" "$SHARED_PATH/storage"
    check_symlink "bootstrap/cache" "Bootstrap Cache" "$SHARED_PATH/bootstrap/cache"
    check_symlink "public/storage" "Public Storage" "../storage/app/public"
fi

# Add symlink report to main report
cat >> "$REPORT_FILE" << EOF

### ? Symlink Health Check
EOF

# Convert technical symlink report to user-friendly format
while IFS='|' read -r component status target resolved; do
    if [[ "$component" =~ "Web Root" ]]; then
        if [[ "$status" =~ "VALID" ]]; then
            echo "✅ **Website Access**: Working correctly" >> "$REPORT_FILE"
        else
            echo "❌ **Website Access**: BROKEN - visitors cannot reach your site!" >> "$REPORT_FILE"
        fi
    elif [[ "$component" =~ "Current Release" ]]; then
        if [[ "$status" =~ "VALID" ]]; then
            echo "✅ **Active Version**: Properly linked" >> "$REPORT_FILE"
        else
            echo "❌ **Active Version**: BROKEN - no active deployment!" >> "$REPORT_FILE"
        fi
    elif [[ "$component" =~ "Environment File" ]]; then
        if [[ "$status" =~ "VALID" ]]; then
            echo "✅ **Configuration**: Database & settings connected" >> "$REPORT_FILE"
        else
            echo "❌ **Configuration**: MISSING - app cannot start!" >> "$REPORT_FILE"
        fi
    elif [[ "$component" =~ "Storage Directory" ]]; then
        if [[ "$status" =~ "VALID" ]]; then
            echo "✅ **File Storage**: User uploads preserved" >> "$REPORT_FILE"
        else
            echo "❌ **File Storage**: BROKEN - user files may be lost!" >> "$REPORT_FILE"
        fi
    elif [[ "$component" =~ "Public Storage" ]]; then
        if [[ "$status" =~ "VALID" ]]; then
            echo "✅ **Public Files**: Images & uploads accessible" >> "$REPORT_FILE"
        else
            echo "❌ **Public Files**: BROKEN - images won't display!" >> "$REPORT_FILE"
        fi
    fi
done < /tmp/symlink_report

cat >> "$REPORT_FILE" << EOF

**? Overall Status:** $([ "$SYMLINK_STATUS" = "HEALTHY" ] && echo "✅ ALL SYSTEMS WORKING" || echo "⚠️ CRITICAL ISSUES FOUND")

EOF

# C2-04: Shared Directory Analysis
echo "=== Shared Directory Analysis ==="

cd "$DEPLOY_PATH"

# Function to analyze shared directory
analyze_shared_dir() {
    local DIR_PATH="$1"
    local DESCRIPTION="$2"
    
    if [ -d "$SHARED_PATH/$DIR_PATH" ]; then
        local SIZE=$(du -sh "$SHARED_PATH/$DIR_PATH" 2>/dev/null | cut -f1)
        local COUNT=$(find "$SHARED_PATH/$DIR_PATH" -type f 2>/dev/null | wc -l)
        echo "✅ $DESCRIPTION: $SIZE ($COUNT files)"
        echo "| $DESCRIPTION | ✅ EXISTS | $SIZE | $COUNT files |" >> /tmp/shared_report
    else
        echo "⚠️ $DESCRIPTION: NOT FOUND"
        echo "| $DESCRIPTION | ⚠️ MISSING | N/A | N/A |" >> /tmp/shared_report
    fi
}

# Initialize shared report
echo "" > /tmp/shared_report

# Analyze core shared directories
analyze_shared_dir "storage" "Laravel Storage"
analyze_shared_dir "bootstrap/cache" "Bootstrap Cache"
# Check .env file separately since it's a file, not a directory
if [ -f "$SHARED_PATH/.env" ]; then
    ENV_SIZE=$(du -sh "$SHARED_PATH/.env" 2>/dev/null | cut -f1)
    echo "✅ Environment File: $ENV_SIZE (1 file)"
    echo "| Environment File | ✅ EXISTS | $ENV_SIZE | 1 file |" >> /tmp/shared_report
else
    echo "⚠️ Environment File: NOT FOUND"
    echo "| Environment File | ⚠️ MISSING | N/A | N/A |" >> /tmp/shared_report
fi

# Analyze user content directories (universal patterns)
USER_CONTENT_DIRS=("public/uploads" "public/user-uploads" "public/media" "public/avatars" 
                   "public/attachments" "public/documents" "public/files" "public/images")

USER_CONTENT_FOUND=0
for DIR in "${USER_CONTENT_DIRS[@]}"; do
    if [ -d "$SHARED_PATH/$DIR" ]; then
        analyze_shared_dir "$DIR" "User Content: $(basename "$DIR")"
        USER_CONTENT_FOUND=$((USER_CONTENT_FOUND + 1))
    fi
done

# Analyze generated content directories
GENERATED_DIRS=("public/qrcodes" "public/barcodes" "public/certificates" "public/reports")
GENERATED_FOUND=0
for DIR in "${GENERATED_DIRS[@]}"; do
    if [ -d "$SHARED_PATH/$DIR" ]; then
        analyze_shared_dir "$DIR" "Generated: $(basename "$DIR")"
        GENERATED_FOUND=$((GENERATED_FOUND + 1))
    fi
done

# CodeCanyon specific
analyze_shared_dir "Modules" "CodeCanyon Modules"

# Add shared analysis to report
cat >> "$REPORT_FILE" << EOF

### ? Data Protection Status
EOF

# Convert technical shared report to user-friendly format
PROTECTED_DATA_COUNT=0
while IFS='|' read -r description status size content; do
    if [[ "$description" =~ "Laravel Storage" ]]; then
        if [[ "$status" =~ "EXISTS" ]]; then
            echo "✅ **App Data**: $size safely stored ($content)" >> "$REPORT_FILE"
            PROTECTED_DATA_COUNT=$((PROTECTED_DATA_COUNT + 1))
        else
            echo "❌ **App Data**: MISSING - application files not preserved!" >> "$REPORT_FILE"
        fi
    elif [[ "$description" =~ "User Content:" ]]; then
        CONTENT_TYPE=$(echo "$description" | sed 's/User Content: //')
        if [[ "$status" =~ "EXISTS" ]]; then
            echo "✅ **User $CONTENT_TYPE**: $size preserved ($content)" >> "$REPORT_FILE"
            PROTECTED_DATA_COUNT=$((PROTECTED_DATA_COUNT + 1))
        fi
    elif [[ "$description" =~ "Generated:" ]]; then
        CONTENT_TYPE=$(echo "$description" | sed 's/Generated: //')
        if [[ "$status" =~ "EXISTS" ]]; then
            echo "✅ **Generated $CONTENT_TYPE**: $size preserved ($content)" >> "$REPORT_FILE"
            PROTECTED_DATA_COUNT=$((PROTECTED_DATA_COUNT + 1))
        fi
    elif [[ "$description" =~ "CodeCanyon" ]]; then
        if [[ "$status" =~ "EXISTS" ]]; then
            echo "✅ **App Modules**: $size preserved ($content)" >> "$REPORT_FILE"
            PROTECTED_DATA_COUNT=$((PROTECTED_DATA_COUNT + 1))
        fi
    fi
done < /tmp/shared_report

cat >> "$REPORT_FILE" << EOF

**? Data Protection Summary:**  
- **Protected Data Types**: $PROTECTED_DATA_COUNT found
- **User Uploads**: $([ $USER_CONTENT_FOUND -gt 0 ] && echo "$USER_CONTENT_FOUND types preserved" || echo "None found")
- **Generated Files**: $([ $GENERATED_FOUND -gt 0 ] && echo "$GENERATED_FOUND types preserved" || echo "None found")

$([ $PROTECTED_DATA_COUNT -gt 0 ] && echo "✅ **Zero Data Loss**: All user content survives deployments" || echo "ℹ️ **Clean Install**: No user data found (normal for new apps)")

EOF

# C2-05: Laravel Application Health Check
echo "=== Laravel Application Health Check ==="

LARAVEL_STATUS="UNKNOWN"
PHP_VERSION="UNKNOWN"
COMPOSER_VERSION="UNKNOWN"

if [ -n "$CURRENT_RELEASE" ] && [ "$CURRENT_RELEASE" != "NONE" ] && [ -d "$CURRENT_PATH" ]; then
    cd "$CURRENT_PATH"
    
    # Check PHP version
    PHP_VERSION=$(php -v 2>/dev/null | head -1 | cut -d' ' -f2 || echo "ERROR")
    echo "? PHP Version: $PHP_VERSION"
    
    # Check Composer version
    if command -v composer2 &> /dev/null; then
        COMPOSER_VERSION=$(composer2 --version 2>/dev/null | cut -d' ' -f3 || echo "ERROR")
        COMPOSER_CMD="composer2"
    elif composer --version 2>/dev/null | grep -q "version 2\."; then
        COMPOSER_VERSION=$(composer --version 2>/dev/null | cut -d' ' -f3 || echo "ERROR")
        COMPOSER_CMD="composer"
    else
        COMPOSER_VERSION=$(composer --version 2>/dev/null | cut -d' ' -f3 || echo "ERROR")
        COMPOSER_CMD="composer (1.x)"
    fi
    echo "? Composer: $COMPOSER_VERSION ($COMPOSER_CMD)"
    
    # Check exec() function availability (critical for shared hosting)
    EXEC_STATUS=$(php -r "echo function_exists('exec') ? 'AVAILABLE' : 'DISABLED';" 2>/dev/null || echo "ERROR")
    echo "⚙️ exec() Function: $EXEC_STATUS"
    if [ "$EXEC_STATUS" = "DISABLED" ]; then
        echo "   ⚠️ exec() disabled - some artisan commands may fail (common on shared hosting)"
        echo "   ℹ️ Our scripts use manual fallbacks to bypass exec() limitations"
    fi
    
    # Check Laravel
    if [ -f "artisan" ]; then
        LARAVEL_VERSION=$(php artisan --version 2>/dev/null | head -1 || echo "ERROR")
        echo "? Laravel: $LARAVEL_VERSION"
        LARAVEL_STATUS="DETECTED"
        
        # Test database connection
        DB_STATUS="UNKNOWN"
        if php artisan tinker --execute="try { DB::connection()->getPdo(); echo 'OK'; } catch(Exception \$e) { echo 'FAILED'; }" 2>/dev/null | grep -q "OK"; then
            DB_STATUS="✅ CONNECTED"
            echo "?️ Database: Connected"
        else
            DB_STATUS="❌ FAILED"
            echo "?️ Database: Connection Failed"
        fi
        
        # Test cache driver
        CACHE_STATUS="UNKNOWN"
        CACHE_DRIVER=$(grep "^CACHE_DRIVER=" "$SHARED_PATH/.env" | cut -d'=' -f2 || echo "file")
        echo "?️ Cache Driver: $CACHE_DRIVER"
        if php artisan tinker --execute="try { Cache::put('test_key', 'test_value', 60); Cache::get('test_key'); echo 'OK'; } catch(Exception \$e) { echo 'FAILED: ' . \$e->getMessage(); }" 2>/dev/null | grep -q "OK"; then
            CACHE_STATUS="✅ WORKING"
            echo "✅ Cache: Working ($CACHE_DRIVER)"
        else
            CACHE_STATUS="❌ FAILED"
            CACHE_ERROR=$(php artisan tinker --execute="try { Cache::put('test_key', 'test_value', 60); echo 'OK'; } catch(Exception \$e) { echo \$e->getMessage(); }" 2>/dev/null | grep -v "OK" | head -1)
            echo "❌ Cache: Failed ($CACHE_DRIVER) - $CACHE_ERROR"
        fi
        
        # Test session driver
        SESSION_STATUS="UNKNOWN"
        SESSION_DRIVER=$(grep "^SESSION_DRIVER=" "$SHARED_PATH/.env" | cut -d'=' -f2 || echo "file")
        echo "? Session Driver: $SESSION_DRIVER"
        if php artisan tinker --execute="try { session(['test_session' => 'test_value']); session('test_session'); echo 'OK'; } catch(Exception \$e) { echo 'FAILED'; }" 2>/dev/null | grep -q "OK"; then
            SESSION_STATUS="✅ WORKING"
            echo "✅ Sessions: Working ($SESSION_DRIVER)"
        else
            SESSION_STATUS="❌ FAILED"
            SESSION_ERROR=$(php artisan tinker --execute="try { session(['test_session' => 'test_value']); echo 'OK'; } catch(Exception \$e) { echo \$e->getMessage(); }" 2>/dev/null | grep -v "OK" | head -1)
            echo "❌ Sessions: Failed ($SESSION_DRIVER) - $SESSION_ERROR"
        fi
        
        # Check critical Laravel directories
        VENDOR_STATUS=$([ -d "vendor" ] && echo "✅ EXISTS" || echo "❌ MISSING")
        STORAGE_STATUS=$([ -L "storage" ] && echo "✅ SYMLINKED" || echo "❌ NOT_SYMLINKED")
        ENV_STATUS=$([ -L ".env" ] && echo "✅ SYMLINKED" || echo "❌ NOT_SYMLINKED")
        
        echo "? Vendor: $VENDOR_STATUS"
        echo "? Storage: $STORAGE_STATUS"
        echo "⚙️ Environment: $ENV_STATUS"
    else
        echo "⚠️ No artisan file found - not a Laravel application"
        LARAVEL_STATUS="NOT_LARAVEL"
    fi
else
    echo "⚠️ No current release to analyze"
fi

# Add Laravel analysis to report
cat >> "$REPORT_FILE" << EOF

### ? Laravel Application Health
EOF

# Add user-friendly Laravel status
if [ "$LARAVEL_STATUS" = "DETECTED" ]; then
    cat >> "$REPORT_FILE" << EOF
✅ **Laravel Framework**: $LARAVEL_VERSION running on PHP $PHP_VERSION
✅ **Dependencies**: Composer $COMPOSER_VERSION with vendor directory intact
✅ **Environment**: Configuration properly symlinked and accessible
$([ "$EXEC_STATUS" = "DISABLED" ] && echo "⚠️ **exec() Function**: Disabled (shared hosting) - using manual fallbacks" || echo "✅ **exec() Function**: Available for full artisan support")

**Core System Tests:**
- **Database**: $([ "$DB_STATUS" = "✅ CONNECTED" ] && echo "✅ Connected and responding" || echo "❌ Connection failed")
- **Cache System**: $([ "$CACHE_STATUS" = "✅ WORKING" ] && echo "✅ $CACHE_DRIVER driver working" || echo "❌ $CACHE_DRIVER driver failed - $CACHE_ERROR")
- **Session System**: $([ "$SESSION_STATUS" = "✅ WORKING" ] && echo "✅ $SESSION_DRIVER driver working" || echo "❌ $SESSION_DRIVER driver failed - $SESSION_ERROR")
- **File Storage**: $([ "$STORAGE_STATUS" = "✅ SYMLINKED" ] && echo "✅ Properly symlinked for zero-downtime" || echo "❌ Not symlinked - data loss risk")

**Infrastructure:**
- **Dependencies**: $([ "$VENDOR_STATUS" = "✅ EXISTS" ] && echo "$(find "$CURRENT_PATH/vendor" -name "*.php" 2>/dev/null | wc -l) PHP files loaded" || echo "❌ Missing vendor directory")
- **Configuration**: $([ "$ENV_STATUS" = "✅ SYMLINKED" ] && echo "✅ Environment shared across deployments" || echo "❌ Not properly configured")
EOF
else
    cat >> "$REPORT_FILE" << EOF
⚠️ **Laravel Framework**: Not detected or not working properly
- **Status**: $LARAVEL_STATUS
- **PHP**: $PHP_VERSION
- **Composer**: $COMPOSER_VERSION
EOF
fi

cat >> "$REPORT_FILE" << EOF

EOF

# C2-06: Security Verification
echo "=== Security Verification ==="

SECURITY_ISSUES=0

cd "$DOMAIN_ROOT"

# Check public_html security
if [ -L "public_html" ]; then
    PUBLIC_TARGET=$(readlink "public_html")
    if [[ "$PUBLIC_TARGET" == *"/public" ]]; then
        echo "✅ Web root correctly points to Laravel public directory"
    else
        echo "⚠️ Web root does not point to Laravel public directory"
        SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
    fi
else
    echo "❌ Web root is not a symlink - potential security risk"
    SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
fi

# Check for exposed sensitive files in public_html
if [ -d "public_html" ]; then
    cd "public_html"
    EXPOSED_FILES=()
    for FILE in .env .env.example composer.json composer.lock package.json .git; do
        if [ -e "$FILE" ]; then
            EXPOSED_FILES+=("$FILE")
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
        fi
    done
    
    if [ ${#EXPOSED_FILES[@]} -eq 0 ]; then
        echo "✅ No sensitive files exposed in web root"
    else
        echo "❌ Exposed sensitive files: ${EXPOSED_FILES[*]}"
    fi
fi

# Check .env permissions
cd "$DEPLOY_PATH"
if [ -f "$SHARED_PATH/.env" ]; then
    ENV_PERMS=$(stat -c "%a" "$SHARED_PATH/.env" 2>/dev/null || echo "000")
    if [ "$ENV_PERMS" = "600" ] || [ "$ENV_PERMS" = "644" ]; then
        echo "✅ .env file has secure permissions ($ENV_PERMS)"
    else
        echo "⚠️ .env file permissions may be too open ($ENV_PERMS)"
        SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
    fi
else
    echo "❌ .env file not found in shared directory"
    SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
fi

# Add security analysis to report
cat >> "$REPORT_FILE" << EOF

### Security Analysis
| Check | Status | Details |
|-------|--------|---------|
| Web Root Symlink | $([ -L "$DOMAIN_ROOT/public_html" ] && echo "✅ SECURE" || echo "❌ INSECURE") | Points to: $([ -L "$DOMAIN_ROOT/public_html" ] && readlink "$DOMAIN_ROOT/public_html" || echo "NOT_SYMLINK") |
| Exposed Sensitive Files | $([ ${#EXPOSED_FILES[@]} -eq 0 ] && echo "✅ NONE" || echo "❌ FOUND") | $([ ${#EXPOSED_FILES[@]} -gt 0 ] && echo "${EXPOSED_FILES[*]}" || echo "Clean") |
| .env Permissions | $([ -f "$SHARED_PATH/.env" ] && echo "✅ $(stat -c "%a" "$SHARED_PATH/.env")" || echo "❌ MISSING") | $([ -f "$SHARED_PATH/.env" ] && echo "File secured" || echo "Environment file not found") |

**Security Issues Found:** $SECURITY_ISSUES

EOF

# C2-07: Performance & Optimization Check
echo "=== Performance & Optimization Check ==="

OPTIMIZATION_STATUS="UNKNOWN"

if [ -n "$CURRENT_RELEASE" ] && [ "$CURRENT_RELEASE" != "NONE" ] && [ -d "$CURRENT_PATH" ]; then
    cd "$CURRENT_PATH"
    
    # Check Laravel caches
    CONFIG_CACHE=$([ -f "bootstrap/cache/config.php" ] && echo "✅ CACHED" || echo "⚠️ NOT_CACHED")
    ROUTE_CACHE=$([ -f "bootstrap/cache/routes-v7.php" ] && echo "✅ CACHED" || echo "⚠️ NOT_CACHED")
    VIEW_CACHE=$(find "storage/framework/views" -name "*.php" 2>/dev/null | wc -l)
    VIEW_STATUS=$([ $VIEW_CACHE -gt 0 ] && echo "✅ CACHED ($VIEW_CACHE files)" || echo "⚠️ NO_CACHE")
    
    echo "⚙️ Config Cache: $CONFIG_CACHE"
    echo "?️ Route Cache: $ROUTE_CACHE"
    echo "?️ View Cache: $VIEW_STATUS"
    
    # Check Composer optimization
    if [ -f "vendor/composer/autoload_classmap.php" ]; then
        CLASSMAP_COUNT=$(wc -l < "vendor/composer/autoload_classmap.php")
        COMPOSER_OPT=$([ $CLASSMAP_COUNT -gt 100 ] && echo "✅ OPTIMIZED ($CLASSMAP_COUNT classes)" || echo "⚠️ NOT_OPTIMIZED")
    else
        COMPOSER_OPT="❌ NO_CLASSMAP"
    fi
    echo "? Composer Autoload: $COMPOSER_OPT"
    
    # Check OPcache
    OPCACHE_STATUS=$(php -r "echo function_exists('opcache_get_status') ? 'AVAILABLE' : 'NOT_AVAILABLE';" 2>/dev/null || echo "ERROR")
    echo "? OPcache: $OPCACHE_STATUS"
fi

# Add performance analysis to report
cat >> "$REPORT_FILE" << EOF

### Performance & Optimization
| Component | Status | Details |
|-----------|--------|---------|
| Config Cache | $([ -n "$CONFIG_CACHE" ] && echo "$CONFIG_CACHE" || echo "⚠️ NOT_CHECKED") | $([ -f "$CURRENT_PATH/bootstrap/cache/config.php" ] && echo "Cached configuration loaded" || echo "No config cache") |
| Route Cache | $([ -n "$ROUTE_CACHE" ] && echo "$ROUTE_CACHE" || echo "⚠️ NOT_CHECKED") | $([ -f "$CURRENT_PATH/bootstrap/cache/routes-v7.php" ] && echo "Cached routes loaded" || echo "No route cache") |
| View Cache | $([ -n "$VIEW_STATUS" ] && echo "$VIEW_STATUS" || echo "⚠️ NOT_CHECKED") | Compiled view templates |
| Composer Autoload | $([ -n "$COMPOSER_OPT" ] && echo "$COMPOSER_OPT" || echo "⚠️ NOT_CHECKED") | Class mapping optimization |
| OPcache | $([ "$OPCACHE_STATUS" = "AVAILABLE" ] && echo "✅ $OPCACHE_STATUS" || echo "⚠️ $OPCACHE_STATUS") | PHP bytecode caching |

EOF

# C2-08: Release Management Analysis
echo "=== Release Management Analysis ==="

cd "$DEPLOY_PATH"

# Analyze releases
if [ -d "releases" ]; then
    RELEASES=($(ls -1t releases/ 2>/dev/null))
    TOTAL_RELEASES=${#RELEASES[@]}
    
    echo "? Total releases: $TOTAL_RELEASES"
    
    if [ $TOTAL_RELEASES -gt 0 ]; then
        LATEST_RELEASE=${RELEASES[0]}
        echo "? Latest release: $LATEST_RELEASE"
        
        # Calculate release sizes
        for i in "${!RELEASES[@]}"; do
            if [ $i -lt 5 ]; then  # Only show last 5 releases
                RELEASE=${RELEASES[$i]}
                SIZE=$(du -sh "releases/$RELEASE" 2>/dev/null | cut -f1)
                AGE=$(stat -c %Y "releases/$RELEASE" 2>/dev/null)
                CURRENT_TIME=$(date +%s)
                AGE_HOURS=$(( (CURRENT_TIME - AGE) / 3600 ))
                
                if [ "$RELEASE" = "$CURRENT_RELEASE" ]; then
                    echo "? $RELEASE: $SIZE (${AGE_HOURS}h ago) [CURRENT]"
                else
                    echo "   $RELEASE: $SIZE (${AGE_HOURS}h ago)"
                fi
            fi
        done
        
        # Check for old releases
        OLD_RELEASES=$(( TOTAL_RELEASES - 3 ))
        if [ $OLD_RELEASES -gt 0 ]; then
            echo "?️ Old releases to cleanup: $OLD_RELEASES"
        fi
    fi
fi

# Add release analysis to report
cat >> "$REPORT_FILE" << EOF

### Release Management
| Metric | Value | Details |
|--------|-------|---------|
| Total Releases | $TOTAL_RELEASES | Stored in releases/ directory |
| Current Release | $CURRENT_RELEASE | $([ -n "$CURRENT_RELEASE" ] && echo "Active deployment" || echo "No active deployment") |
| Latest Release | $([ $TOTAL_RELEASES -gt 0 ] && echo "$LATEST_RELEASE" || echo "None") | Most recent in releases/ |
| Cleanup Needed | $([ $OLD_RELEASES -gt 0 ] && echo "$OLD_RELEASES releases" || echo "None") | Releases beyond keep limit (3) |

#### Recent Releases
\`\`\`
EOF

if [ $TOTAL_RELEASES -gt 0 ]; then
    for i in "${!RELEASES[@]}"; do
        if [ $i -lt 5 ]; then
            RELEASE=${RELEASES[$i]}
            SIZE=$(du -sh "releases/$RELEASE" 2>/dev/null | cut -f1)
            AGE=$(stat -c %Y "releases/$RELEASE" 2>/dev/null)
            CURRENT_TIME=$(date +%s)
            AGE_HOURS=$(( (CURRENT_TIME - AGE) / 3600 ))
            
            if [ "$RELEASE" = "$CURRENT_RELEASE" ]; then
                echo "$RELEASE: $SIZE (${AGE_HOURS}h ago) [CURRENT]" >> "$REPORT_FILE"
            else
                echo "$RELEASE: $SIZE (${AGE_HOURS}h ago)" >> "$REPORT_FILE"
            fi
        fi
    done
else
    echo "No releases found" >> "$REPORT_FILE"
fi

cat >> "$REPORT_FILE" << EOF
\`\`\`

EOF

# C2-09: HTTP Health Check
echo "=== HTTP Health Check ==="

HTTP_STATUS="UNKNOWN"
RESPONSE_TIME="UNKNOWN"

if [ -n "$CURRENT_RELEASE" ] && [ "$CURRENT_RELEASE" != "NONE" ] && [ -f "$SHARED_PATH/.env" ]; then
    APP_URL=$(grep "^APP_URL=" "$SHARED_PATH/.env" | cut -d'=' -f2 | tr -d '"' | tr -d "'")
    
    if [ -n "$APP_URL" ] && command -v curl &> /dev/null; then
        echo "? Testing: $APP_URL"
        
        # Test main page
        START_TIME=$(date +%s.%N)
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" --max-time 10 2>/dev/null || echo "000")
        END_TIME=$(date +%s.%N)
        RESPONSE_TIME=$(echo "$END_TIME - $START_TIME" | bc 2>/dev/null || echo "unknown")
        
        # Test install page first (for fresh deployments)
        INSTALL_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL/install" --max-time 10 2>/dev/null || echo "000")
        
        case $HTTP_CODE in
            200|201|301|302) 
                HTTP_STATUS="✅ HEALTHY ($HTTP_CODE)"
                echo "✅ Application responding: HTTP $HTTP_CODE (${RESPONSE_TIME}s)"
                ;;
            503) 
                HTTP_STATUS="⚠️ MAINTENANCE ($HTTP_CODE)"
                echo "⚠️ Application in maintenance mode: HTTP $HTTP_CODE"
                ;;
            500)
                if [ "$INSTALL_CODE" = "200" ]; then
                    HTTP_STATUS="✅ PENDING_INSTALL ($HTTP_CODE)"
                    echo "✅ Fresh deployment detected: Main site HTTP $HTTP_CODE, Install page accessible"
                    echo "ℹ️ This is EXPECTED - complete installation at: $APP_URL/install"
                else
                    HTTP_STATUS="❌ ERROR ($HTTP_CODE)"
                    echo "❌ Application error: HTTP $HTTP_CODE (install page also failed)"
                fi
                ;;
            000) 
                HTTP_STATUS="❌ UNREACHABLE"
                echo "❌ Application unreachable (timeout/connection error)"
                ;;
            *) 
                HTTP_STATUS="⚠️ ERROR ($HTTP_CODE)"
                echo "⚠️ Application returned: HTTP $HTTP_CODE"
                if [ "$INSTALL_CODE" = "200" ]; then
                    echo "ℹ️ Install page accessible: HTTP $INSTALL_CODE"
                fi
                ;;
        esac
    else
        echo "⚠️ Cannot test HTTP (no APP_URL or curl unavailable)"
    fi
else
    echo "⚠️ Cannot determine APP_URL"
fi

# Add HTTP analysis to report
cat >> "$REPORT_FILE" << EOF

### ? Website Status
EOF

# Add user-friendly HTTP status
if [[ "$HTTP_STATUS" =~ "PENDING_INSTALL" ]]; then
    cat >> "$REPORT_FILE" << EOF
✅ **Fresh Deployment Ready**: Your app is deployed correctly and ready for setup
- **Main Site**: Shows setup screen (HTTP $HTTP_CODE) - This is EXPECTED
- **Install Page**: \`$APP_URL/install\` is accessible (HTTP $INSTALL_CODE)
- **Next Step**: Complete installation wizard at \`$APP_URL/install\`

? **Status**: Ready for first-time setup
EOF
elif [[ "$HTTP_STATUS" =~ "HEALTHY" ]]; then
    cat >> "$REPORT_FILE" << EOF
✅ **Website Online**: Your application is running properly
- **Main Site**: \`$APP_URL\` responding (HTTP $HTTP_CODE)
- **Response Time**: ${RESPONSE_TIME}s
- **Status**: Fully operational

? **Status**: Production ready
EOF
elif [[ "$HTTP_STATUS" =~ "MAINTENANCE" ]]; then
    cat >> "$REPORT_FILE" << EOF
⚠️ **Maintenance Mode**: Site temporarily offline for updates
- **Main Site**: \`$APP_URL\` in maintenance (HTTP $HTTP_CODE)
- **Status**: Planned downtime

? **Status**: Maintenance in progress
EOF
else
    cat >> "$REPORT_FILE" << EOF
❌ **Website Issues**: Problems detected with site access
- **Main Site**: \`$APP_URL\` error (HTTP $HTTP_CODE)
- **Install Page**: $([ "$INSTALL_CODE" = "200" ] && echo "Accessible (HTTP $INSTALL_CODE)" || echo "Also failed (HTTP $INSTALL_CODE)")

? **Status**: Needs troubleshooting
EOF
fi

cat >> "$REPORT_FILE" << EOF

EOF

# C2-10: Final Summary and Recommendations
echo "=== Generating Final Summary ==="

# Calculate overall health score
TOTAL_CHECKS=12
PASSED_CHECKS=0

[ "$SYMLINK_STATUS" = "HEALTHY" ] && PASSED_CHECKS=$((PASSED_CHECKS + 1))
[ "$LARAVEL_STATUS" = "DETECTED" ] && PASSED_CHECKS=$((PASSED_CHECKS + 1))
[ "$DB_STATUS" = "✅ CONNECTED" ] && PASSED_CHECKS=$((PASSED_CHECKS + 1))
[ "$CACHE_STATUS" = "✅ WORKING" ] && PASSED_CHECKS=$((PASSED_CHECKS + 1))
[ "$SESSION_STATUS" = "✅ WORKING" ] && PASSED_CHECKS=$((PASSED_CHECKS + 1))
[ "$VENDOR_STATUS" = "✅ EXISTS" ] && PASSED_CHECKS=$((PASSED_CHECKS + 1))
[ "$STORAGE_STATUS" = "✅ SYMLINKED" ] && PASSED_CHECKS=$((PASSED_CHECKS + 1))
[ "$ENV_STATUS" = "✅ SYMLINKED" ] && PASSED_CHECKS=$((PASSED_CHECKS + 1))
[ $SECURITY_ISSUES -eq 0 ] && PASSED_CHECKS=$((PASSED_CHECKS + 1))
[ "$CONFIG_CACHE" = "✅ CACHED" ] && PASSED_CHECKS=$((PASSED_CHECKS + 1))
# HTTP check passes if: working (200/301/302), pending install (500 + install accessible), or maintenance (503)
([ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "301" ] || [ "$HTTP_CODE" = "302" ] || [ "$HTTP_CODE" = "503" ] || [[ "$HTTP_STATUS" =~ "PENDING_INSTALL" ]]) && PASSED_CHECKS=$((PASSED_CHECKS + 1))
[ $TOTAL_RELEASES -gt 0 ] && PASSED_CHECKS=$((PASSED_CHECKS + 1))

HEALTH_PERCENTAGE=$(( (PASSED_CHECKS * 100) / TOTAL_CHECKS ))

# Determine overall status
if [ $HEALTH_PERCENTAGE -ge 90 ]; then
    OVERALL_STATUS="? EXCELLENT"
elif [ $HEALTH_PERCENTAGE -ge 75 ]; then
    OVERALL_STATUS="? GOOD"
elif [ $HEALTH_PERCENTAGE -ge 50 ]; then
    OVERALL_STATUS="? NEEDS_ATTENTION"
else
    OVERALL_STATUS="? CRITICAL"
fi

echo "? Overall Health: $HEALTH_PERCENTAGE% ($PASSED_CHECKS/$TOTAL_CHECKS checks passed)"
echo "? Status: $OVERALL_STATUS"

# Add final summary to report
cat >> "$REPORT_FILE" << EOF

---

## ? FINAL ASSESSMENT

### Overall Health Score: $HEALTH_PERCENTAGE% ($PASSED_CHECKS/$TOTAL_CHECKS)
### Status: $OVERALL_STATUS

### Summary by Category:
- **Infrastructure:** $([ "$SYMLINK_STATUS" = "HEALTHY" ] && echo "✅ Healthy" || echo "⚠️ Issues")
- **Laravel Application:** $([ "$LARAVEL_STATUS" = "DETECTED" ] && echo "✅ Detected" || echo "⚠️ Issues")
- **Database:** $([ "$DB_STATUS" = "✅ CONNECTED" ] && echo "✅ Connected" || echo "⚠️ Issues")
- **Cache System:** $([ "$CACHE_STATUS" = "✅ WORKING" ] && echo "✅ Working ($CACHE_DRIVER)" || echo "⚠️ Failed ($CACHE_DRIVER)")
- **Session System:** $([ "$SESSION_STATUS" = "✅ WORKING" ] && echo "✅ Working ($SESSION_DRIVER)" || echo "⚠️ Failed ($SESSION_DRIVER)")
- **Security:** $([ $SECURITY_ISSUES -eq 0 ] && echo "✅ Secure" || echo "⚠️ $SECURITY_ISSUES issues")
- **Performance:** $([ "$CONFIG_CACHE" = "✅ CACHED" ] && echo "✅ Optimized" || echo "⚠️ Not optimized")
- **HTTP Response:** $(if [[ "$HTTP_STATUS" =~ "HEALTHY" ]]; then echo "✅ Healthy"; elif [[ "$HTTP_STATUS" =~ "PENDING_INSTALL" ]]; then echo "✅ Ready for setup"; elif [[ "$HTTP_STATUS" =~ "MAINTENANCE" ]]; then echo "⚠️ Maintenance"; else echo "⚠️ Issues"; fi)

### Recommendations:
EOF

# Generate recommendations
if [ "$SYMLINK_STATUS" != "HEALTHY" ]; then
    echo "- ? **Fix symlink issues** - Critical for zero-downtime deployment" >> "$REPORT_FILE"
fi

if [ $SECURITY_ISSUES -gt 0 ]; then
    echo "- ? **Address security issues** - $SECURITY_ISSUES problems found" >> "$REPORT_FILE"
fi

if [ "$CACHE_STATUS" = "❌ FAILED" ]; then
    echo "- ?️ **Fix Cache System** - $CACHE_DRIVER driver failed. Consider switching to \`file\` driver in .env" >> "$REPORT_FILE"
fi

if [ "$SESSION_STATUS" = "❌ FAILED" ]; then
    echo "- ? **Fix Session System** - $SESSION_DRIVER driver failed. Consider switching to \`file\` driver in .env" >> "$REPORT_FILE"
fi

if [ "$CONFIG_CACHE" != "✅ CACHED" ]; then
    echo "- ⚡ **Enable Laravel caching** - Run \`php artisan config:cache\` and \`php artisan route:cache\`" >> "$REPORT_FILE"
fi

if [ $OLD_RELEASES -gt 0 ]; then
    echo "- ?️ **Cleanup old releases** - Remove $OLD_RELEASES old releases to save disk space" >> "$REPORT_FILE"
fi

if [[ "$HTTP_STATUS" =~ "PENDING_INSTALL" ]]; then
    echo "- ? **Complete Installation** - Visit \`$APP_URL/install\` to finish setup" >> "$REPORT_FILE"
elif [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "301" ] && [ "$HTTP_CODE" != "302" ] && [ "$HTTP_CODE" != "503" ]; then
    echo "- ? **Fix HTTP issues** - Application not responding correctly (HTTP $HTTP_CODE)" >> "$REPORT_FILE"
fi

if [ "$DB_STATUS" != "✅ CONNECTED" ]; then
    echo "- ?️ **Fix database connection** - Application cannot connect to database" >> "$REPORT_FILE"
fi

# Add no issues message if everything is good
if [ $HEALTH_PERCENTAGE -ge 90 ]; then
    echo "- ✅ **No critical issues found** - Deployment is healthy and ready for production" >> "$REPORT_FILE"
fi

cat >> "$REPORT_FILE" << EOF

---

## ? DETAILED LOGS

### Environment Variables
\`\`\`bash
DOMAIN_NAME=$DOMAIN_NAME
DEPLOY_PATH=$DEPLOY_PATH
CURRENT_RELEASE=$CURRENT_RELEASE
TOTAL_RELEASES=$TOTAL_RELEASES
SHARED_SIZE=$SHARED_SIZE
PHP_VERSION=$PHP_VERSION
COMPOSER_VERSION=$COMPOSER_VERSION
\`\`\`

### File Permissions
\`\`\`bash
EOF

# Add file permissions
if [ -f "$SHARED_PATH/.env" ]; then
    echo "shared/.env: $(stat -c "%a %U:%G" "$SHARED_PATH/.env" 2>/dev/null)" >> "$REPORT_FILE"
fi

if [ -d "$SHARED_PATH/storage" ]; then
    echo "shared/storage: $(stat -c "%a %U:%G" "$SHARED_PATH/storage" 2>/dev/null)" >> "$REPORT_FILE"
fi

cat >> "$REPORT_FILE" << EOF
\`\`\`

### Disk Usage
\`\`\`bash
EOF

du -sh releases/* 2>/dev/null | tail -5 >> "$REPORT_FILE" || echo "No releases found" >> "$REPORT_FILE"

cat >> "$REPORT_FILE" << EOF
\`\`\`

---

**Report Generated:** $(date '+%Y-%m-%d %H:%M:%S')  
**Script Version:** Phase C-2 v2.0  
**Next Report:** Run Phase C-2 after next deployment  

EOF

# C2-11: Cleanup and Final Output
echo "=== Finalizing Report ==="

# Clean up temporary files
rm -f /tmp/symlink_report /tmp/shared_report

# Set proper permissions on report
chmod 644 "$REPORT_FILE"

# Create latest report symlink
cd "$REPORT_DIR"
rm -f latest-report.md
ln -sf "$(basename "$REPORT_FILE")" latest-report.md

echo "✅ Comprehensive verification completed"
echo "? Report saved: $REPORT_FILE"
echo "? Latest report: $REPORT_DIR/latest-report.md"
echo "? Overall Health: $HEALTH_PERCENTAGE% - $OVERALL_STATUS"

# Return to original directory
cd "$DEPLOY_PATH"

echo "? Phase C-2 completed successfully"
exit 0

