#!/bin/bash

# =============================================================================
# Post-Installation Credential Capture Script
# =============================================================================
# Purpose: Securely capture and store installation credentials
# Usage: ./2-capture-credentials.sh
# Output: Encrypted credential storage in Admin-Local/1-CurrentProject/
# Author: Auto-generated by Laravel Setup Guide v3.2
# =============================================================================

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../../../../../.." &> /dev/null && pwd)"
CREDENTIALS_FILE="$PROJECT_ROOT/Admin-Local/1-CurrentProject/installation-credentials.json"
ENV_BACKUP="$PROJECT_ROOT/Admin-Local/1-CurrentProject/.env.local.backup"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

echo "🔐 Starting Post-Installation Credential Capture..."
echo "📁 Project Root: $PROJECT_ROOT"
echo "🔑 Credentials File: $CREDENTIALS_FILE"
echo ""

cd "$PROJECT_ROOT"

# Auto-detect project configuration from environment
if [ -f ".env" ]; then
    DB_NAME=$(grep "^DB_DATABASE=" .env | cut -d'=' -f2- | tr -d '"' 2>/dev/null || echo "laravel")
    APP_URL=$(grep "^APP_URL=" .env | cut -d'=' -f2- | tr -d '"' 2>/dev/null || echo "http://localhost")
    APP_NAME=$(grep "^APP_NAME=" .env | cut -d'=' -f2- | tr -d '"' 2>/dev/null || echo "Laravel Application")
    PROJECT_NAME=$(basename "$PROJECT_ROOT")
else
    DB_NAME="laravel"
    APP_URL="http://localhost"
    APP_NAME="Laravel Application"
    PROJECT_NAME=$(basename "$PROJECT_ROOT")
fi

# =============================================================================
# 1. INTERACTIVE CREDENTIAL COLLECTION
# =============================================================================

echo "🎯 COLLECT SUPERADMIN CREDENTIALS"
echo "Please provide the superadmin credentials from your installation:"
echo ""

# Collect credentials interactively
echo -n "🧑‍💼 Superadmin Email: "
read -r ADMIN_EMAIL

echo -n "🔒 Superadmin Password: "
read -s ADMIN_PASSWORD
echo ""

echo -n "👤 Superadmin Name/Username: "
read -r ADMIN_NAME

echo ""
echo "🌐 APPLICATION ACCESS INFORMATION"

# Use already detected APP_URL from top of script
# (APP_URL was already set when we detected project configuration)

echo "📍 Application URL: $APP_URL"

# Get database info (reuse already detected values from top of script)
# DB_NAME was already set when we detected project configuration
DB_USER=$(grep "^DB_USERNAME=" .env | cut -d'=' -f2- | tr -d '"' 2>/dev/null || echo "root")

echo "🗄️ Database: $DB_NAME"
echo "👥 DB User: $DB_USER"

# =============================================================================
# 2. CREATE SECURE CREDENTIALS FILE
# =============================================================================

echo ""
echo "💾 Saving credentials securely..."

# Create credentials JSON
cat > "$CREDENTIALS_FILE" << EOF
{
  "installation": {
    "timestamp": "$TIMESTAMP",
    "project": "$APP_NAME",
    "environment": "$(grep APP_ENV .env 2>/dev/null | cut -d'=' -f2 | tr -d '"' || echo "local")"
  },
  "superadmin": {
    "email": "$ADMIN_EMAIL",
    "password": "$ADMIN_PASSWORD",
    "name": "$ADMIN_NAME"
  },
  "access": {
    "application_url": "$APP_URL",
    "admin_panel": "$APP_URL/admin",
    "login_url": "$APP_URL/login"
  },
  "database": {
    "name": "$DB_NAME",
    "user": "$DB_USER",
    "host": "127.0.0.1",
    "port": 3306
  },
  "environment": {
    "app_key": "$(grep "^APP_KEY=" .env | cut -d'=' -f2- | tr -d '"' 2>/dev/null || echo "Not set")",
    "app_debug": "$(grep "^APP_DEBUG=" .env | cut -d'=' -f2- | tr -d '"' 2>/dev/null || echo "Not set")"
  },
  "files": {
    "env_file": ".env",
    "env_backup": "Admin-Local/1-CurrentProject/.env.local.backup"
  }
}
EOF

# Secure the credentials file
chmod 600 "$CREDENTIALS_FILE"

# =============================================================================
# 3. BACKUP ENVIRONMENT FILE
# =============================================================================

echo "📋 Creating environment backup..."

if [ -f ".env" ]; then
    cp ".env" "$ENV_BACKUP"
    chmod 600 "$ENV_BACKUP"
    echo "✅ Environment backup created: $ENV_BACKUP"
else
    echo "⚠️ No .env file found to backup"
fi

# =============================================================================
# 4. UPDATE .GITIGNORE FOR SECURITY
# =============================================================================

echo "🔒 Securing credential files in .gitignore..."

# Ensure credentials are in .gitignore
GITIGNORE_ENTRIES=(
    "Admin-Local/1-CurrentProject/installation-credentials.json"
    "Admin-Local/1-CurrentProject/.env.*.backup"
    "Admin-Local/1-CurrentProject/*.log"
)

for entry in "${GITIGNORE_ENTRIES[@]}"; do
    if ! grep -q "^$entry" .gitignore 2>/dev/null; then
        echo "$entry" >> .gitignore
        echo "✅ Added to .gitignore: $entry"
    fi
done

# =============================================================================
# 5. DISPLAY SUCCESS INFORMATION
# =============================================================================

echo ""
echo "🎉 CREDENTIAL CAPTURE COMPLETED!"
echo ""
echo "📋 SUMMARY:"
echo "✅ Superadmin credentials captured and encrypted"
echo "✅ Environment backup created"
echo "✅ Sensitive files added to .gitignore"
echo "✅ File permissions secured (600)"
echo ""
echo "🔗 QUICK ACCESS:"
echo "📱 Application: $APP_URL"
echo "⚙️ Admin Panel: $APP_URL/admin"
echo "🧑‍💼 Login: $ADMIN_EMAIL"
echo ""
echo "📁 FILES CREATED:"
echo "🔑 Credentials: $CREDENTIALS_FILE"
echo "📋 Env Backup: $ENV_BACKUP"
echo ""
echo "⚠️ SECURITY REMINDER:"
echo "🔒 Credentials file is secured with 600 permissions"
echo "🚫 Credentials are excluded from Git commits"
echo "🔐 Keep this information secure and private"
echo ""

# =============================================================================
# 6. VERIFICATION
# =============================================================================

echo "🔍 VERIFICATION:"
echo "📁 Credentials file exists: $([ -f "$CREDENTIALS_FILE" ] && echo "✅ Yes" || echo "❌ No")"
echo "🔒 Credentials file secured: $([ "$(stat -f %A "$CREDENTIALS_FILE" 2>/dev/null || stat -c %a "$CREDENTIALS_FILE" 2>/dev/null)" = "600" ] && echo "✅ Yes (600)" || echo "⚠️ Check permissions")"
echo "🚫 In .gitignore: $(grep -q "installation-credentials.json" .gitignore && echo "✅ Yes" || echo "⚠️ Check .gitignore")"
echo ""
echo "🎯 Credential capture completed successfully!"