<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\View;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Route;

class CustomizationServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        // Register custom configuration files
        $this->mergeConfigFrom(
            app_path('Custom/config/custom-app.php'), 'custom'
        );
        
        $this->mergeConfigFrom(
            app_path('Custom/config/custom-database.php'), 'custom.database'
        );
        
        // Register custom services
        $this->registerCustomServices();
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        // Load custom views
        $this->loadCustomViews();
        
        // Load custom routes
        $this->loadCustomRoutes();
        
        // Register custom middleware
        $this->registerCustomMiddleware();
        
        // Register custom helpers
        $this->registerCustomHelpers();
        
        // Publish custom assets
        $this->publishCustomAssets();
    }
    
    /**
     * Register custom services
     * 
     * Note: Uses class_exists() checks for safe progressive implementation.
     * Services will only be registered if their classes exist, preventing errors
     * during initial setup or partial implementation.
     */
    protected function registerCustomServices(): void
    {
        // Custom Dashboard Service
        $this->app->singleton('custom.dashboard', function ($app) {
            if (class_exists('App\\Custom\\Services\\DashboardService')) {
                return app('App\\Custom\\Services\\DashboardService');
            }
            // Safe fallback - null object pattern to prevent method call errors
            return new class {
                public function __call($method, $args) { return null; }
                public function __get($property) { return null; }
            };
        });
        
        // Custom Notification Service
        $this->app->singleton('custom.notifications', function ($app) {
            if (class_exists('App\\Custom\\Services\\NotificationService')) {
                return app('App\\Custom\\Services\\NotificationService');
            }
            // Safe fallback
            return new class {
                public function __call($method, $args) { return null; }
                public function __get($property) { return null; }
            };
        });
        
        // Custom Theme Service
        $this->app->singleton('custom.theme', function ($app) {
            if (class_exists('App\\Custom\\Services\\ThemeService')) {
                return app('App\\Custom\\Services\\ThemeService');
            }
            // Safe fallback
            return new class {
                public function __call($method, $args) { return null; }
                public function __get($property) { return null; }
            };
        });
    }
    
    /**
     * Load custom view paths
     */
    protected function loadCustomViews(): void
    {
        // Add custom view namespace
        View::addNamespace('custom', resource_path('Custom/views'));
        
        // Override vendor views if custom versions exist
        $customViewsPath = resource_path('Custom/views/overrides');
        if (is_dir($customViewsPath)) {
            // Use prependNamespace instead of prependLocation for better compatibility
            View::prependNamespace('', $customViewsPath);
        }
        
        // Share custom config with all views
        View::share('customConfig', config('custom'));
    }
    
    /**
     * Load custom routes
     */
    protected function loadCustomRoutes(): void
    {
        // API Routes
        $customApiRoutes = app_path('Custom/routes/api.php');
        if (file_exists($customApiRoutes)) {
            Route::middleware('api')
                 ->prefix('api/custom')
                 ->namespace('App\Custom\Controllers\Api')
                 ->group($customApiRoutes);
        }
        
        // Web Routes
        $customWebRoutes = app_path('Custom/routes/web.php');
        if (file_exists($customWebRoutes)) {
            Route::middleware('web')
                 ->prefix('custom')
                 ->namespace('App\Custom\Controllers')
                 ->group($customWebRoutes);
        }
    }
    
    /**
     * Register custom middleware
     * 
     * Note: Uses class_exists() checks to safely register middleware.
     * Only registers middleware classes that actually exist.
     */
    protected function registerCustomMiddleware(): void
    {
        // Register custom middleware aliases
        $router = $this->app['router'];
        
        $customMiddleware = [
            'custom.auth' => 'App\\Custom\\Middleware\\CustomAuthentication',
            'custom.role' => 'App\\Custom\\Middleware\\CustomRoleCheck',
            'custom.feature' => 'App\\Custom\\Middleware\\FeatureToggle',
        ];
        
        foreach ($customMiddleware as $alias => $class) {
            if (class_exists($class)) {
                $router->aliasMiddleware($alias, $class);
            }
        }
    }
    
    /**
     * Register custom helper functions
     */
    protected function registerCustomHelpers(): void
    {
        $helpersFile = app_path('Custom/Helpers/functions.php');
        if (file_exists($helpersFile)) {
            require_once $helpersFile;
        }
    }
    
    /**
     * Publish custom assets
     */
    protected function publishCustomAssets(): void
    {
        if ($this->app->runningInConsole()) {
            // Publish custom config files
            $this->publishes([
                app_path('Custom/config') => config_path('custom'),
            ], 'custom-config');
            
            // Publish custom assets
            $this->publishes([
                resource_path('Custom/assets') => public_path('custom'),
            ], 'custom-assets');
            
            // Publish custom views
            $this->publishes([
                resource_path('Custom/views/publishable') => resource_path('views/custom'),
            ], 'custom-views');
        }
    }
    
    /**
     * Get the services provided by the provider.
     */
    public function provides(): array
    {
        return [
            'custom.dashboard',
            'custom.notifications',
            'custom.theme',
        ];
    }
}
