p name: 🚀 SocietyPal Updates & Installation

on:
  push:
    branches: [main, staging, production]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options: [staging, production]

env:
  PHP_VERSION: "8.2"
  NODE_VERSION: "18"
  PROJECT_NAME: "SocietyPal"

jobs:
  deploy:
    name: 🎯 Deploy to ${{ github.ref_name == 'production' && 'Production' || 'Staging' }}
    runs-on: ubuntu-latest

    environment: ${{ github.ref_name == 'production' && 'production' || 'staging' }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, gd, curl, zip, intl
          coverage: none
          tools: composer

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: 🗂️ Cache Composer Dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: 🔨 Install PHP Dependencies
        run: composer install --optimize-autoloader --no-dev --prefer-dist --no-interaction --no-progress

      - name: 📦 Install Node Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build Frontend Assets
        run: npm run build
        env:
          NODE_ENV: production

      - name: 🔍 Detect CodeCanyon Application
        run: |
          echo "🔍 Checking for CodeCanyon application..."
          chmod +x .github/scripts/codecanyon-detector.sh
          ./.github/scripts/codecanyon-detector.sh

      - name: 🔍 Laravel Optimizations
        run: |
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan event:cache

      - name: 🗜️ Create Deployment Package
        run: |
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          PACKAGE_NAME="societypal-${TIMESTAMP}.tar.gz"
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          # Create package excluding development files
          tar -czf $PACKAGE_NAME \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='tests' \
            --exclude='.env*' \
            --exclude='*.log' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            .

          echo "📦 Package created: $PACKAGE_NAME ($(ls -lh $PACKAGE_NAME | awk '{print $5}'))"

      - name: 🔐 Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: 🌐 Determine Environment Variables
        run: |
          if [[ "${{ github.ref_name }}" == "production" ]]; then
            echo "ENV_NAME=production" >> $GITHUB_ENV
            echo "DOMAIN_PATH=/home/${{ secrets.SERVER_USER }}/domains/societypal.com" >> $GITHUB_ENV
            echo "PUBLIC_PATH=/home/${{ secrets.SERVER_USER }}/domains/societypal.com/public_html" >> $GITHUB_ENV
            echo "SHARED_PATH=/home/${{ secrets.SERVER_USER }}/domains/societypal.com/deploy/shared" >> $GITHUB_ENV
            echo "RELEASES_PATH=/home/${{ secrets.SERVER_USER }}/domains/societypal.com/releases" >> $GITHUB_ENV
            echo "DB_HOST=${{ secrets.DB_HOST_PROD }}" >> $GITHUB_ENV
            echo "DB_DATABASE=${{ secrets.DB_DATABASE_PROD }}" >> $GITHUB_ENV
            echo "DB_USERNAME=${{ secrets.DB_USERNAME_PROD }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD_PROD }}" >> $GITHUB_ENV
          else
            echo "ENV_NAME=staging" >> $GITHUB_ENV
            echo "DOMAIN_PATH=/home/${{ secrets.SERVER_USER }}/domains/staging.societypal.com" >> $GITHUB_ENV
            echo "PUBLIC_PATH=/home/${{ secrets.SERVER_USER }}/domains/staging.societypal.com/public_html" >> $GITHUB_ENV
            echo "SHARED_PATH=/home/${{ secrets.SERVER_USER }}/domains/staging.societypal.com/deploy/shared" >> $GITHUB_ENV
            echo "RELEASES_PATH=/home/${{ secrets.SERVER_USER }}/domains/staging.societypal.com/releases" >> $GITHUB_ENV
            echo "DB_HOST=${{ secrets.DB_HOST_STAGING }}" >> $GITHUB_ENV
            echo "DB_DATABASE=${{ secrets.DB_DATABASE_STAGING }}" >> $GITHUB_ENV
            echo "DB_USERNAME=${{ secrets.DB_USERNAME_STAGING }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD_STAGING }}" >> $GITHUB_ENV
          fi

      - name: 📤 Upload Package to Server
        run: |
          scp -P ${{ secrets.SERVER_PORT }} -i ~/.ssh/deploy_key \
            ${{ env.PACKAGE_NAME }} \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

      - name: 🚀 Deploy to Server
        run: |
          ssh -p ${{ secrets.SERVER_PORT }} -i ~/.ssh/deploy_key \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'

          # Set variables
          ENV_NAME="${{ env.ENV_NAME }}"
          TIMESTAMP="${{ env.TIMESTAMP }}"
          PACKAGE_NAME="${{ env.PACKAGE_NAME }}"
          DOMAIN_PATH="${{ env.DOMAIN_PATH }}"
          PUBLIC_PATH="${{ env.PUBLIC_PATH }}"
          SHARED_PATH="${{ env.SHARED_PATH }}"
          RELEASES_PATH="${{ env.RELEASES_PATH }}"
          RELEASE_PATH="$RELEASES_PATH/$TIMESTAMP"

          # Create directory structure
          echo "📂 Creating directory structure..."
          mkdir -p "$RELEASES_PATH"
          mkdir -p "$SHARED_PATH"/{storage,uploads,.env}

          # Extract package
          echo "📦 Extracting package..."
          mkdir -p "$RELEASE_PATH"
          cd "$RELEASE_PATH"
          tar -xzf "/tmp/$PACKAGE_NAME"

          # Create environment file
          echo "🔧 Creating environment file..."
          cat > "$RELEASE_PATH/.env" << 'ENVFILE'
          APP_NAME="SocietyPal"
          APP_ENV=${{ env.ENV_NAME }}
          APP_KEY=base64:$(openssl rand -base64 32)
          APP_DEBUG=${{ env.ENV_NAME == 'staging' && 'true' || 'false' }}
          APP_URL=${{ env.ENV_NAME == 'production' && 'https://societypal.com' || 'https://staging.societypal.com' }}

          LOG_CHANNEL=stack
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=debug

          DB_CONNECTION=mysql
          DB_HOST=${{ env.DB_HOST }}
          DB_PORT=3306
          DB_DATABASE=${{ env.DB_DATABASE }}
          DB_USERNAME=${{ env.DB_USERNAME }}
          DB_PASSWORD="${{ env.DB_PASSWORD }}"

          BROADCAST_DRIVER=log
          CACHE_DRIVER=file
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=sync
          SESSION_DRIVER=file
          SESSION_LIFETIME=120

          MEMCACHED_HOST=127.0.0.1

          REDIS_HOST=127.0.0.1
          REDIS_PASSWORD=null
          REDIS_PORT=6379

          MAIL_MAILER=smtp
          MAIL_HOST=mailpit
          MAIL_PORT=1025
          MAIL_USERNAME=null
          MAIL_PASSWORD=null
          MAIL_ENCRYPTION=null
          MAIL_FROM_ADDRESS="hello@example.com"
          MAIL_FROM_NAME="${APP_NAME}"
          ENVFILE

          # Link shared directories
          echo "🔗 Linking shared directories..."
          rm -rf "$RELEASE_PATH/storage"
          ln -nfs "$SHARED_PATH/storage" "$RELEASE_PATH/storage"

          # Set permissions
          echo "🔐 Setting permissions..."
          find "$RELEASE_PATH" -type f -exec chmod 644 {} \;
          find "$RELEASE_PATH" -type d -exec chmod 755 {} \;
          chmod -R 775 "$RELEASE_PATH/bootstrap/cache"

          # Run migrations (with safety check)
          echo "🗄️ Running database migrations..."
          cd "$RELEASE_PATH"
          php artisan migrate --force --no-interaction

          # Clear and rebuild cache
          echo "🔄 Rebuilding caches..."
          php artisan config:clear
          php artisan cache:clear
          php artisan view:clear
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          # Atomic switch
          echo "⚡ Performing atomic deployment switch..."
          if [ -L "$PUBLIC_PATH" ]; then
            PREVIOUS_RELEASE=$(readlink "$PUBLIC_PATH")
            echo "Previous release: $PREVIOUS_RELEASE"
          fi

          ln -nfs "$RELEASE_PATH/public" "$PUBLIC_PATH"
          echo "✅ Deployment completed successfully!"

          # Cleanup old releases (keep last 3)
          echo "🧹 Cleaning up old releases..."
          cd "$RELEASES_PATH"
          ls -dt */ | tail -n +4 | xargs rm -rf
          echo "Old releases cleaned up."

          # Health check
          echo "🏥 Performing health check..."
          HEALTH_URL="${{ env.ENV_NAME == 'production' && 'https://societypal.com' || 'https://staging.societypal.com' }}"
          if curl -f -s -o /dev/null "$HEALTH_URL"; then
            echo "✅ Health check passed - Application is responding"
          else
            echo "⚠️  Health check warning - Application might not be fully ready yet"
          fi

          ENDSSH

      - name: 🧹 Cleanup Local Files
        run: |
          rm -f ${{ env.PACKAGE_NAME }}
          rm -f ~/.ssh/deploy_key

      - name: 📊 Deployment Summary
        run: |
          echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | ${{ env.ENV_NAME }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Release** | ${{ env.TIMESTAMP }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Package** | ${{ env.PACKAGE_NAME }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Domain** | ${{ env.ENV_NAME == 'production' && 'https://societypal.com' || 'https://staging.societypal.com' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [🌐 Visit Site](${{ env.ENV_NAME == 'production' && 'https://societypal.com' || 'https://staging.societypal.com' }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📝 View Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY

      - name: 🚨 Rollback on Failure
        if: failure()
        run: |
          echo "🚨 Deployment failed, initiating rollback..."
          ssh -p ${{ secrets.SERVER_PORT }} -i ~/.ssh/deploy_key \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'

          RELEASES_PATH="${{ env.RELEASES_PATH }}"
          PUBLIC_PATH="${{ env.PUBLIC_PATH }}"

          # Find previous release
          cd "$RELEASES_PATH"
          PREVIOUS_RELEASE=$(ls -dt */ | head -n 2 | tail -n 1 | sed 's/\///')

          if [ ! -z "$PREVIOUS_RELEASE" ]; then
            echo "Rolling back to: $PREVIOUS_RELEASE"
            ln -nfs "$RELEASES_PATH/$PREVIOUS_RELEASE/public" "$PUBLIC_PATH"
            echo "✅ Rollback completed"
          else
            echo "❌ No previous release found for rollback"
          fi

          # Remove failed release
          FAILED_RELEASE="${{ env.TIMESTAMP }}"
          if [ -d "$RELEASES_PATH/$FAILED_RELEASE" ]; then
            rm -rf "$RELEASES_PATH/$FAILED_RELEASE"
            echo "🗑️ Removed failed release: $FAILED_RELEASE"
          fi

          ENDSSH
